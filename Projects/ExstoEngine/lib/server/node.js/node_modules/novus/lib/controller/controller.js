/**
 * Creates a new instance of a room controller.
 * 
 * @param {Room} room The room that was just created.
 * @param {User} creator The creator of the room.
 * @returns {Controller} The instance of the new Controller.
 */
function Controller(room, creator) {
  this.room = room;
  this.creator = creator;
};

module.exports = Controller;

/**
 * Called when a user joins the room.
 * 
 * @param {User} user The user that joined the room.
 */
Controller.prototype.onJoin = function (user) {
  
};

/**
 * Called when a user leaves the room.
 * 
 * @param {User} user The user that left the room.
 */
Controller.prototype.onLeave = function (user) {
  
};

/**
 * Called when a user sends a message to the room.
 * 
 * @param {User} user The user that sent the message.
 * @param {Object} data The contents of the message.
 */
Controller.prototype.onMessage = function (user, data) {
  
};

/**
 * Sends a room message to a user.
 * 
 * @param {String} type The type of the message to send.
 * @param {Object} data The data to send as the message.
 * @param {User} user The user to send the message to.
 */
Controller.prototype.message = function (type, data, user) {
  user.conn.emit('roomMessage', { type: type, message: data });
};

/**
 * Sends a message to everyone in the room.
 * 
 * @param {String} type The type of the message to send.
 * @param {Object} data The data to send as the message.
 */
Controller.prototype.messageAll = function (type, data) {
  this.creator.conn.broadcast.to(this.room.name).emit('roomMessage', { type: type, message: data });
};