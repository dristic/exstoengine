var io = require('socket.io'),
    config = require('./config'),
	  Room = require('./room'),
	  um = require('./usermanager'),
	  rm = exports;

rm.bind = function(socket) {
	socket.on('roomList', function(data) {
		socket.emit('roomList', { list: rm.rooms });
	});
	
	// Create room
	socket.on('createRoom', function(data) {
		var user = um.getUser(socket);
		
		if(user != null && user.authenticated == true) {
			var room = rm.findRoom(data.name);
			if(room == null) {
				room = rm.createRoom(data.name, user, config.room.controller);
				socket.broadcast.emit('createRoom', { room: { name: room.name } });
			} else if(room.creator.authenticated == false) {
			  room.creator = user;
			  rm.joinRoom(user, room);
			}
		}
	});
	
	// Join room
	socket.on('joinRoom', function(data) {
		var room = rm.findRoom(data.name);
		var user = um.getUser(socket);
		
		if(user != null && user.authenticated == true) {
			rm.joinRoom(user, room);
			socket.emit('joinRoom', { success: true });
		}
	});
	
	// Leave room
	socket.on('leaveRoom', function(data) {
		var user = um.getUser(socket);
		if(user != null) {
			rm.leaveRoom(user);
		};
	});
	
	socket.on('roomMessage', function(data) {
		var user = um.getUser(socket),
			room = rm.getRoom(user.currentRoom);
		
		// Let the controller handle messages if there is one
		if(room.controller) {
		   room.controller.onMessage(user, data);
		} else {
		  socket.broadcast.to(room.name).emit('roomMessage', data);
		}
	});
	
	socket.on('roomMessageTo', function(data) {
		var otherUser = um.findUser(data.name),
		    user = um.getUser(socket);
		
		if(otherUser != null && otherUser.currentRoom == user.currentRoom) {
			otherUser.conn.emit('roomMessage', data);
		}
	});
};

rm.rooms = [];

rm.createRoom = function(name, creator, controller) {
	var room = new Room(name, creator);
	if(controller) {
	  room.controller = new controller(room, creator);
	}
	rm.rooms.push(room);
	return room;
};

rm.joinRoom = function(user, room) {
	if(user.currentRoom != -1) {
		rm.leaveRoom(user);
	}
	user.currentRoom = room.id;
	room.users.push(user.id);
	user.conn.join(room.name);
	if(room.controller) {
	  room.controller.onJoin(user);
	}
};

rm.leaveRoom = function(user) {
	var room = rm.getRoom(user.currentRoom);
	
	if(room != null) {
		room.removeUser(user);
		user.currentRoom = -1;
		if(room.controller) {
		  room.controller.onLeave(user);
		}
	}
};

rm.getRoom = function(roomId) {
	var ret = null;
	
	rm.rooms.forEach(function (item, index, array) {
		if(item.id == roomId) {
			ret = item;
			return false;
		}
	});
	
	return ret;
};

rm.findRoom = function(name) {
	var ret = null;
	
	rm.rooms.forEach(function (room, index, array) {
		if(room.name == name) {
			ret = room;
			return false;
		}
	});
	
	return ret;
};

rm.disconnect = function(user) {
	rm.leaveRoom(user);
};