var io = require('socket.io'),
	um = require('./usermanager'),
	rm = exports;

rm.bind = function(socket) {
	// Create room
	socket.on('createRoom', function(data) {
		var user = um.getUser(socket);
		if(user != null) {
			var room = rm.findRoom(data.name);
			if(room == null) {
				room = rm.createRoom(data.name, user);
			}
			rm.joinRoom(user, room);
		}
	});
	
	// Join room
	socket.on('joinRoom', function(data) {
		var room = rm.findRoom(data.name);
		var user = um.getUser(socket);
		rm.joinRoom(user, room);
	});
	
	// Leave room
	socket.on('leaveRoom', function(data) {
		var user = um.getUser(socket);
		if(user != null) {
			rm.getRoom(user.currentRoom).removeUser(user);
			user.currentRoom = -1;
		};
	});
	
	socket.on('roomMessage', function(data) {
		var user = um.getUser(socket),
			room = rm.getRoom(user.currentRoom);
		
		socket.broadcast.to(room.name).emit('roomMessage', data);
	});
	
	socket.on('roomMessageTo', function(data) {
		var otherUser = um.findUser(data.name);
		
		if(otherUser != null) {
			otherUser.conn.emit('roomMessage', data);
		}
	});
};

rm.nextId = 1;
rm.rooms = [];

rm.createRoom = function(name, creator) {
	var room = new Room(name, creator);
	rm.rooms.push(room);
	return room;
};

rm.joinRoom = function(user, room) {
	user.currentRoom = room.id;
	room.users.push(user);
	user.conn.join(room.name);
};

rm.getRoom = function(roomId) {
	var ret = null;
	
	rm.rooms.forEach(function (item, index, array) {
		if(item.id == roomId) {
			ret = item;
			return false;
		}
	});
	
	return ret;
};

rm.findRoom = function(name) {
	rm.rooms.forEach(function (item) {
		if(item.name == name) {
			return item;
		}
	});
	
	return null;
};

function Room(name, creator) {
	this.id = rm.nextId++;
	this.name = name;
	this.creator = creator;
	this.users = [];
	
	console.log('Room created | name: ' + name + ' | creator: ' + creator.name);
};

Room.prototype.removeUser = function(user) {
	this.users = this.users.filter(function (element) {
		return (element == user);
	});
};