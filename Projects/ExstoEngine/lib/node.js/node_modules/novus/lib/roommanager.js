var io = require('socket.io'),
	um = require('./usermanager'),
	rm = exports;

rm.bind = function(socket) {
	// Create room
	socket.on('createRoom', function(data) {
		var user = um.getUser(socket);
		if(user != null) {
			user.currentRoom = rm.createRoom(data.name, user).id;
		}
	});
	
	// Join room
	socket.on('joinRoom', function(data) {
		var room = rm.findRoom(data.name);
		var user = um.getUser(socket);
		user.currentRoom = room.id;
		room.users.push(user);
	});
	
	// Leave room
	socket.on('leaveRoom', function(data) {
		var user = um.getUser(socket);
		if(user != null) {
			rm.getRoom(user.currentRoom).removeUser(user);
			user.currentRoom = -1;
		};
	});
	
	socket.on('roomMessage', function(data) {
		
	});
};

rm.nextId = 0;
rm.rooms = [];

rm.createRoom = function(name, creator) {
	return rm.rooms.push(new Room(name, creator));
};

rm.getRoom = function(roomId) {
	rm.rooms.forEach(function (item) {
		if(item.id == roomId) {
			return item;
		}
	});
	
	return null;
};

rm.findRoom = function(name) {
	rm.rooms.forEach(function (item) {
		if(item.name == name) {
			return item;
		}
	});
	
	return null;
};

function Room(name, creator) {
	this.id = rm.nextId++;
	this.name = name;
	this.creator = creator;
	this.users = [ creator ];
	
	console.log('Room created | name: ' + name + ' | creator: ' + creator.name);
};

Room.prototype.removeUser = function(user) {
	this.users = this.users.filter(function (element) {
		return (element == user);
	});
};